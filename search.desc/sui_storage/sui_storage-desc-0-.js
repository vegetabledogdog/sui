searchState.loadedDescShard("sui_storage", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nIndexStore supports creation of various ancillary indexes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmutable key/value store trait for storing/retrieving …\nWritePathPendingTransactionLog is used in the transaction …\nAn iterator over blobs in a blob file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate config structs for configuring DBMap tables\nCreate an intermediate struct used to open the DBMap …\nBuild a config\nCount the keys in this table Tables must be opened in read …\nReturns a list of the tables name and type pairs\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method gets the balance for all coin types from the …\nRead all balances for a <code>SuiAddress</code> from the backend …\nThis method first gets the balance from …\nRead balance for a <code>SuiAddress</code> and <code>CoinType</code> from the …\nstarting_object_id can be used to implement pagination, …\nThis opens the DB in read only mode and returns a struct …\nInitialize to defaults\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nOpens a set of tables in read-write mode Only one process …\nOpens a set of tables in transactional read-write mode …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …\nA TransactionKeyValueStoreTrait that falls back to a …\nImmutable key/value store trait for storing/retrieving …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience method for fetching single checkpoint, and …\nConvenience method for fetching single checkpoint, and …\nConvenience method for fetching single checkpoint, and …\nConvenience method for fetching single checkpoint, and …\nConvenience method for fetching single digest, and …\nConvenience method for fetching single digest, and …\nConvenience method for fetching single digest, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneric multi_get, allows implementors to get heterogenous …\nGeneric multi_get, allows implementors to get heterogenous …\nGeneric multi_get to allow implementors to get …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nDelete the object at the given location in object store\nReturn the bytes at given path in object store\nList the objects at the given path in object store\nWrite the bytes at the given location in object store\nThis function will find all child directories in the input …\nThis function will find all child directories in the input …\nThis function will find missing epoch directories in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate config structs for configuring DBMap tables\nCreate an intermediate struct used to open the DBMap …\nBuild a config\nCount the keys in this table Tables must be opened in read …\nDump all key-value pairs in the page at the given table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize to defaults\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen in read only mode. No limitation on number of …\nGet key value sizes from the db Tables must be opened in …\nTry catch up with primary for all tables. This can be a …")